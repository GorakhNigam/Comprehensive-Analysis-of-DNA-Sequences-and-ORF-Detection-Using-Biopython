# -*- coding: utf-8 -*-
"""Copy of parse.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Iq9-1zYMvi6rUnb6rHhKqRDveA11WJUw
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %pip install biopython

from Bio import SeqIO
from textwrap import wrap
import csv


class GeneInfo:
    def __init__(self, gene_name, synonyms, location, refseq_ids=None, sequence=""):
        self.gene_name = gene_name
        self.synonyms = synonyms or "NA"
        self.location = location or "NA"
        self.refseq_ids = refseq_ids or "NA"
        self.sequence = sequence

class GeneParser:
    def __init__(self, fasta_file, metadata_file, output):
        self.fasta_file = fasta_file
        self.metadata_file = metadata_file
        self.output = output
        self.metadata = {}
        self.sequences = []

    def parse_fasta(self):
        for rec in SeqIO.parse(self.fasta_file, "fasta"):
            self.sequences.append((rec.id.split()[0], str(rec.seq)))
        return self.sequences

    def parse_gene_metadata(self):
        with open(self.metadata_file, newline="") as fh:
            reader = csv.DictReader(fh, delimiter="\t")
            for row in reader:
                symbol = row["Approved Symbol"].strip()
                synonyms = row["Synonyms"].strip() or "NA"
                location = row["Chromosome"].strip() or "NA"
                refseq = row["RefSeq IDs"].strip() or "NA"
                self.metadata[symbol] = GeneInfo(symbol, synonyms, location, refseq)
        return self.metadata


    def write_combined_fasta(self, ):
        with open(self.output, "w") as out:
            for gene, seq in self.sequences:
                info = self.metadata.get(gene, GeneInfo(gene, "Unknown", "Unknown"))
                header = f">{info.gene_name}|{info.synonyms}|{info.location}|{info.refseq_ids}"
                out.write(header + "\n")
                out.write("\n".join(wrap(seq, 60)) + "\n")
        print(f"Annotated FASTA written to {self.output}")

    def run(self):
        """Run the complete pipeline."""
        self.parse_fasta()
        self.parse_gene_metadata()
        self.write_combined_fasta()

path = '/content/drive/MyDrive/Biomedical_DS/homework2/'
if __name__ == "__main__":
    parser = GeneParser(path+"human.fa", path+"protein-coding_gene.txt", path+"annotated_human_proteins.fa")
    parser.run()


